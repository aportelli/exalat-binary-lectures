$ lldb hello
(lldb) target create "hello"
Current executable set to '/mnt/hgfs/binary-hack/lectures/1-x86_64/hello' (x86_64).
(lldb) b 6
Breakpoint 1: where = hello`main + 15 at hello.c:6:3, address = 0x000000000040113f
(lldb) r
Process 62988 launched: '/mnt/hgfs/binary-hack/lectures/1-x86_64/hello' (x86_64)
Process 62988 stopped
* thread #1, name = 'hello', stop reason = breakpoint 1.1
    frame #0: 0x000000000040113f hello`main at hello.c:6:3
   3   
   4    int main(void)
   5    {
-> 6      printf("Hello world\n");
   7   
   8      return EXIT_SUCCESS;
   9    }
(lldb) re r rsp rbp # look at stack pointers
     rsp = 0x00007fffffffdee0
     rbp = 0x00007fffffffdef0
(lldb) x 0x00007fffffffdee0 # examine the first 32B of the stack
0x7fffffffdee0: e0 df ff ff ff 7f 00 00 00 00 00 00 00 00 00 00  ................
0x7fffffffdef0: 00 00 00 00 00 00 00 00 b3 70 de f7 ff 7f 00 00  .........p......
(lldb) x $rsp # you can refer to rsp directly
0x7fffffffdee0: e0 df ff ff ff 7f 00 00 00 00 00 00 00 00 00 00  ................
0x7fffffffdef0: 00 00 00 00 00 00 00 00 b3 70 de f7 ff 7f 00 00  .........p......
(lldb) x/x $rsp # read one word at rsp (observer the little-endian order)
0x7fffffffdee0: 0xffffdfe0
(lldb) x/4x $rsp # read 4 words at rsp
0x7fffffffdee0: 0xffffdfe0 0x00007fff 0x00000000 0x00000000
(lldb) x/4xg $rsp # read 4 double words at rsp
0x7fffffffdee0: 0x00007fffffffdfe0 0x0000000000000000
0x7fffffffdef0: 0x0000000000000000 0x00007ffff7de70b3
(lldb) x/32xb $rsp # read 32 bytes at rsp
0x7fffffffdee0: 0xe0 0xdf 0xff 0xff 0xff 0x7f 0x00 0x00
0x7fffffffdee8: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x7fffffffdef0: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x7fffffffdef8: 0xb3 0x70 0xde 0xf7 0xff 0x7f 0x00 0x00
(lldb) x/xb `$rsp + 0x1` # read 1 byte at rsp + 0x1
0x7fffffffdee1: 0xdf
(lldb) p/x $rsp + 0xa # compute address rsp + 0xa
(unsigned long) $21 = 0x00007fffffffdeea
(lldb) x $rip # read memory at rip (this is the code!)
0x0040113f: 48 bf 04 20 40 00 00 00 00 00 b0 00 e8 e0 fe ff  H.. @...........
0x0040114f: ff 31 c9 89 45 f8 89 c8 48 83 c4 10 5d c3 0f 1f  .1..E...H...]...
(lldb) x/4i $rip # read 4 instructions at rip
->  0x40113f: 48 bf 04 20 40 00 00 00 00 00  movabs rdi, 0x402004
    0x401149: b0 00                          mov    al, 0x0
    0x40114b: e8 e0 fe ff ff                 call   0x401030                  ; symbol stub for: printf
    0x401150: 31 c9                          xor    ecx, ecx
(lldb) d # look at the code again, 0x402004 is quite likely teh "Hello world" string
hello`main:
    0x401130 <+0>:  push   rbp
    0x401131 <+1>:  mov    rbp, rsp
    0x401134 <+4>:  sub    rsp, 0x10
    0x401138 <+8>:  mov    dword ptr [rbp - 0x4], 0x0
->  0x40113f <+15>: movabs rdi, 0x402004
    0x401149 <+25>: mov    al, 0x0
    0x40114b <+27>: call   0x401030                  ; symbol stub for: printf
    0x401150 <+32>: xor    ecx, ecx
    0x401152 <+34>: mov    dword ptr [rbp - 0x8], eax
    0x401155 <+37>: mov    eax, ecx
    0x401157 <+39>: add    rsp, 0x10
    0x40115b <+43>: pop    rbp
    0x40115c <+44>: ret
(lldb) x/s 0x402004 # read a string at 0x402004
0x00402004: "Hello world\n"
(lldb) x/4c 0x402004 # read 4 characters at 0x402004
0x00402004: Hell